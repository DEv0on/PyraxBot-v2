name: bot
services:
  leader:
    image: leader:latest
    container_name: leader
    hostname: leader
    env_file:
      - .env
    networks:
      - bot
    depends_on:
      global-router:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
  worker:
    image: worker:latest
    container_name: worker
    hostname: worker
    networks:
      - bot
    env_file:
      - .env
    depends_on:
      leader:
        condition: service_started

  global-router:
    image: globalrouter:latest
    container_name: globalrouter
    hostname: globalrouter
    ports:
      - 33330:33330
    env_file:
      - .env
    networks:
      - bot
  shard-coordinator:
    image: shardcoordinator:latest
    container_name: shardcoordinator
    hostname: shardcoordinator
    ports:
      - 33332:33332
    env_file:
      - .env
    networks:
      - bot
  rabbitmq:
    image: rabbitmq-4.0-custom
    container_name: rabbitmq
    hostname: rabbitmq
    env_file:
      - .env
    ports:
      - 15672:15672
      - 5672:5672
    networks:
      - bot
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 5
    build:
      dockerfile: dockerfiles/rabbitmq.Dockerfile
  redis-cache:
    image: redis:latest
    container_name: redis-cache
    hostname: rediscache
    env_file:
      - .env
    ports:
      - 6379:6379
    networks:
      - bot
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      retries: 5
  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb
    restart: always
    env_file:
      - .env
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - bot
networks:
  bot:
    driver: bridge
    name: bot